# CodeRabbit Configuration for ReddyFit Platform
# https://docs.coderabbit.ai/guides/configure-coderabbit

language: "en-US"
early_access: false
enable_free_tier: true

reviews:
  profile: "assertive"  # Thorough review for Phase 4
  request_changes_workflow: true
  high_level_summary: true
  poem: true
  review_status: true
  collapse_walkthrough: false

  # Auto-review on PR creation
  auto_review:
    enabled: true
    drafts: false  # Don't review draft PRs
    base_branches:
      - main
      - develop

  # Path-based review rules
  path_instructions:
    - path: "features/photoanalysis/services/firestore_client.py"
      instructions: |
        **CRITICAL REVIEW - Step 17 Firestore Persistence**
        Line-by-line analysis required:
        - Firestore transaction atomicity and race conditions
        - Error handling for network failures and timeouts
        - Data conversion correctness (Pydantic ↔ Firestore)
        - Hash collision handling strategy
        - Query optimization and indexing needs
        - Security: Firestore rules compatibility
        - Pagination implementation correctness
        - Memory leaks in long-running operations

    - path: "features/photoanalysis/services/recommendation_engine.py"
      instructions: |
        **CRITICAL REVIEW - Step 18 AI Recommendations**
        Line-by-line analysis required:
        - WHOOP recovery zone logic accuracy (67%, 34% thresholds)
        - Macro calculation formulas (BMR, TDEE correctness)
        - Body type classification → workout split mapping
        - Integration with nutrition-agent error handling
        - Timeline estimation algorithm validity
        - Personalization logic edge cases
        - Missing null checks for optional fields

    - path: "features/photoanalysis/services/error_handler.py"
      instructions: |
        **CRITICAL REVIEW - Step 19 Error Handling**
        Line-by-line analysis required:
        - Retry logic correctness (exponential backoff calculation)
        - Async/sync decorator implementation safety
        - Sentry integration error scenarios
        - Memory leaks in error tracking
        - Exception hierarchy design (recoverable vs fatal)
        - Timeout implementation race conditions
        - Context manager __aexit__ correctness
        - Global state management in singleton

    - path: "features/photoanalysis/services/performance_optimizer.py"
      instructions: |
        **CRITICAL REVIEW - Step 20 Performance Optimization**
        Line-by-line analysis required:
        - Cache TTL expiration logic correctness
        - Redis connection handling and pool exhaustion
        - Parallel execution semaphore limits
        - Cache key collision probability
        - Memory cache size limits and eviction
        - Profiling overhead on production performance
        - Batch processing edge cases (empty batches, errors)
        - Async context manager safety

    - path: "features/photoanalysis/test_phase_4.py"
      instructions: |
        **TEST QUALITY REVIEW**
        - Missing test cases identification
        - Edge case coverage (empty data, null values, failures)
        - Mock usage appropriateness
        - Async test implementation correctness
        - Assertions completeness
        - Test isolation and cleanup

    - path: "features/photoanalysis/**"
      instructions: |
        Focus on:
        - Type safety (type hints)
        - Error handling comprehensiveness
        - Performance optimization opportunities
        - Pydantic model validation
        - API best practices
        - Image processing efficiency

    - path: "features/whoop-integration/**"
      instructions: |
        Focus on:
        - Async/await patterns
        - API error handling
        - Mock data realism
        - Production API compatibility

    - path: "**/*.py"
      instructions: |
        General Python review:
        - PEP 8 compliance
        - Docstring quality
        - Security vulnerabilities
        - Performance bottlenecks
        - Test coverage gaps

    - path: "tests/**"
      instructions: |
        Test quality checks:
        - Edge case coverage
        - Mock usage appropriateness
        - Assertion clarity
        - Test naming conventions

  # Knowledge base for domain-specific review
  knowledge_base:
    - "This is an AI-powered fitness platform using Claude 3.5 Sonnet for body composition analysis"
    - "Target: 95%+ success rate for body scans (up from 37% baseline)"
    - "Processing time goal: <30 seconds per scan"
    - "Uses MediaPipe for pose detection and angle classification"
    - "Integrates with WHOOP API (currently mock data)"
    - "Mathematical analysis includes Golden Ratio, Adonis Index, symmetry scoring"
    - "All measurements should be in metric units (cm, kg, %)"
    - "Security: Never log or store raw user images in plain text"
    - "Phase 4 NEW: Firestore persistence, AI recommendations, error handling, performance optimization"
    - "WHOOP recovery zones: Green ≥67%, Yellow 34-66%, Red <34%"
    - "Adonis Index target: 1.618 (golden ratio for shoulder:waist)"
    - "Body types: V-Taper, Classic, Rectangular, Apple, Pear, Balanced"
    - "Macro formulas: Muscle gain 38cal/kg, Fat loss 28cal/kg, Maintenance 33cal/kg"
    - "Retry pattern: 3 attempts with exponential backoff (1s → 2s → 4s)"
    - "Cache TTL: Default 1 hour, user context 24 hours"

chat:
  auto_reply: true

# Issue detection settings
issues:
  # Auto-detect common issues
  auto_detect:
    enabled: true
    confidence_threshold: 0.7

  # Create GitHub issues for high-severity findings
  auto_create:
    enabled: false  # Manually enable if desired
    labels:
      - "coderabbit"
      - "automated"

# Performance and quality checks
checks:
  # Code complexity
  complexity:
    enabled: true
    threshold: 15  # Cyclomatic complexity limit

  # Documentation
  documentation:
    enabled: true
    missing_docstrings: true

  # Security
  security:
    enabled: true
    scan_dependencies: true

  # Performance
  performance:
    enabled: true
    flag_inefficient_loops: true
    flag_redundant_operations: true

# Tools integration
tools:
  # Linters
  ruff:
    enabled: true
    config: "pyproject.toml"

  # Type checking
  mypy:
    enabled: true
    strict: false  # Enable gradually

  # Testing
  pytest:
    enabled: true
    min_coverage: 80

# Tone and style
tone_instructions: "Be constructive & educational: explain WHY not WHAT, provide examples, highlight positive patterns, prioritize high-impact issues, encourage contributors."

# Custom rules for this project
custom_rules:
  - name: "API Key Security"
    pattern: "(OPENAI_API_KEY|FIREBASE_CREDENTIALS|WHOOP_CLIENT_SECRET)\\s*=\\s*['\"](?!your_|sk-test)"
    message: "Potential hardcoded API key detected. Use environment variables."
    severity: "high"

  - name: "Async Without Await"
    pattern: "async def.*\\n(?!.*await)"
    message: "Async function doesn't use await. Consider making it synchronous."
    severity: "medium"

  - name: "Missing Type Hints"
    pattern: "def (?!__init__|__str__|__repr__)\\w+\\([^)]*\\)(?!\\s*->)"
    message: "Consider adding return type hint for better type safety"
    severity: "low"

  - name: "Hardcoded Thresholds"
    pattern: "if.*[<>]=?\\s*\\d+\\.\\d+"
    message: "Consider moving magic numbers to configuration/constants"
    severity: "low"

# Exclude paths from review
exclude:
  - "**/__pycache__/**"
  - "**/*.pyc"
  - ".venv/**"
  - "venv/**"
  - "dist/**"
  - "build/**"
  - ".pytest_cache/**"
  - "**/*.egg-info/**"

# Review specific file types
file_types:
  python:
    - "*.py"
  config:
    - "*.yaml"
    - "*.yml"
    - "*.json"
    - "*.toml"
  docs:
    - "*.md"
    - "*.rst"

# Notifications
notifications:
  review_complete: true
  new_issue: true
